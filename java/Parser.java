/*

Parser.java

Supplemental XML parsing functionality.

*/

import java.io.IOException;
import java.nio.file.FileSystems;
import java.nio.file.InvalidPathException;
import java.nio.file.Path;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.w3c.dom.DOMException;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class Parser
{
    public static Element parseFile(String first, String... parts)
    {
        Document document;
        Element root = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        
        try
        {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(getFullPath(first, parts));
            
            root = document.getDocumentElement();
            root.normalize();
        }
        catch (SAXParseException spe)
        {
            // Error generated by the parser
            System.out.println("\n** Parsing error"
            + ", line " + spe.getLineNumber()
            + ", uri " + spe.getSystemId());
            System.out.println("   " + spe.getMessage() );

            // Use the contained exception, if any
            Exception  x = spe;
            if (spe.getException() != null)
            x = spe.getException();
            x.printStackTrace();
        }
        catch (SAXException sxe)
        {
            // Error generated during parsing
            Exception  x = sxe;
            if (sxe.getException() != null)
            x = sxe.getException();
            x.printStackTrace();
        }
        catch (ParserConfigurationException pce)
        {
            // Parser with specified options can't be built
            pce.printStackTrace();
        }
        catch (IOException ioe)
        {
            System.err.format("Can't find config file: %s%n", ioe);
        }
        
        return root;
    }
    
    public static Element getLastElement(Element element, String name)
    {
        if (element != null)
        {        
            NodeList nodes = element.getElementsByTagName(name);
            
            if (nodes.getLength() > 0)
            {
                return (Element)(nodes.item(nodes.getLength() - 1));
            }
        }
        
        return null;
    }
    
    public static String getFullPath(String first, String... parts)
    {
        String path = "";
        
        try
        {
            path = FileSystems.getDefault().getPath(first, parts).toString();
        }
        catch (InvalidPathException e)
        {
            System.err.format("Can't load image file: %s%n", e);
        }
        
        return path;
    }
}
